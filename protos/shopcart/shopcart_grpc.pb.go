// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.6
// source: shopcart/shopcart.proto

package shopcart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserShopcart_AddProduct_FullMethodName    = "/usershopcart.UserShopcart/AddProduct"
	UserShopcart_DeleteProduct_FullMethodName = "/usershopcart.UserShopcart/DeleteProduct"
	UserShopcart_GetProducts_FullMethodName   = "/usershopcart.UserShopcart/GetProducts"
	UserShopcart_Clear_FullMethodName         = "/usershopcart.UserShopcart/Clear"
)

// UserShopcartClient is the client API for UserShopcart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserShopcartClient interface {
	AddProduct(ctx context.Context, in *RequestByIDWithProduct, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteProduct(ctx context.Context, in *RequestByIDWithProduct, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProducts(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*GetProductsResponse, error)
	Clear(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userShopcartClient struct {
	cc grpc.ClientConnInterface
}

func NewUserShopcartClient(cc grpc.ClientConnInterface) UserShopcartClient {
	return &userShopcartClient{cc}
}

func (c *userShopcartClient) AddProduct(ctx context.Context, in *RequestByIDWithProduct, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserShopcart_AddProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userShopcartClient) DeleteProduct(ctx context.Context, in *RequestByIDWithProduct, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserShopcart_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userShopcartClient) GetProducts(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, UserShopcart_GetProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userShopcartClient) Clear(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserShopcart_Clear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserShopcartServer is the server API for UserShopcart service.
// All implementations must embed UnimplementedUserShopcartServer
// for forward compatibility
type UserShopcartServer interface {
	AddProduct(context.Context, *RequestByIDWithProduct) (*emptypb.Empty, error)
	DeleteProduct(context.Context, *RequestByIDWithProduct) (*emptypb.Empty, error)
	GetProducts(context.Context, *RequestByID) (*GetProductsResponse, error)
	Clear(context.Context, *RequestByID) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserShopcartServer()
}

// UnimplementedUserShopcartServer must be embedded to have forward compatible implementations.
type UnimplementedUserShopcartServer struct {
}

func (UnimplementedUserShopcartServer) AddProduct(context.Context, *RequestByIDWithProduct) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedUserShopcartServer) DeleteProduct(context.Context, *RequestByIDWithProduct) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedUserShopcartServer) GetProducts(context.Context, *RequestByID) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedUserShopcartServer) Clear(context.Context, *RequestByID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedUserShopcartServer) mustEmbedUnimplementedUserShopcartServer() {}

// UnsafeUserShopcartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserShopcartServer will
// result in compilation errors.
type UnsafeUserShopcartServer interface {
	mustEmbedUnimplementedUserShopcartServer()
}

func RegisterUserShopcartServer(s grpc.ServiceRegistrar, srv UserShopcartServer) {
	s.RegisterService(&UserShopcart_ServiceDesc, srv)
}

func _UserShopcart_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByIDWithProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserShopcartServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserShopcart_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserShopcartServer).AddProduct(ctx, req.(*RequestByIDWithProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserShopcart_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByIDWithProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserShopcartServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserShopcart_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserShopcartServer).DeleteProduct(ctx, req.(*RequestByIDWithProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserShopcart_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserShopcartServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserShopcart_GetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserShopcartServer).GetProducts(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserShopcart_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserShopcartServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserShopcart_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserShopcartServer).Clear(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

// UserShopcart_ServiceDesc is the grpc.ServiceDesc for UserShopcart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserShopcart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usershopcart.UserShopcart",
	HandlerType: (*UserShopcartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _UserShopcart_AddProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _UserShopcart_DeleteProduct_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _UserShopcart_GetProducts_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _UserShopcart_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopcart/shopcart.proto",
}
